
/// TO DISCUSS: Don't want this here.
record unit {}

/// TO DISCUSS: Don't want this here.
type usize = u32

/// TO DISCUSS: Don't want this here.
record iovec {
	start: usize,
	length: usize,
}

/// TO DISCUSS: Don't want this here.
type iovecs = list<iovec>

/// TO DISCUSS: Don't want this here.
resource input-byte-stream {}

/// TO DISCUSS: Don't want this here.
resource output-byte-stream {}






/// TODO
enum socket-error {
	/// TODO: https://github.com/WebAssembly/interface-types/issues/145
	unknown,
}

enum socket-kind {
	/// TODO: https://github.com/WebAssembly/interface-types/issues/145
	unknown,
	tcp,
	udp,
}

enum ip-address-family {
	/// Similar to `AF_INET` in POSIX.
	ipv4, 

	/// Similar to `AF_INET6` in POSIX.
	ipv6,
}

/// Single field record for symmetry with `ipv6-address`.
record ipv4-address {
	/// The address in network order (big-endian). Note: WebAssembly is little-endian.
	data: u32,
}

/// Interface Types doesn't have either u128 or fixed length arrays. https://github.com/WebAssembly/interface-types/issues/146
record ipv6-address {
	/// Upper half of the address in network order (big-endian). Note: WebAssembly is little-endian.	
	data-msb: u64,

	/// Lower half of the address in network order (big-endian). Note: WebAssembly is little-endian.
	data-lsb: u64,
}

variant ip-address {
	ipv4(ipv4-address),
	ipv6(ipv6-address),
}

record ipv4-socket-address {
	port: u16, // sin_port
	address: ipv4-address, // sin_addr
}

record ipv6-socket-address {
	port: u16, // sin6_port
	flow-info: u32, // sin6_flowinfo
	address: ipv6-address, // sin6_addr
	scope-id: u32, // sin6_scope_id
}

variant ip-socket-address {
	ipv4(ipv4-socket-address),
	ipv6(ipv6-socket-address),
}

record udp-receive-result {
	bytes-received: usize,
	
	/// Similar to the `MSG_TRUNC` flag in POSIX.
	truncated: bool,
	remote-address: ip-socket-address,

	/// Possible future additions:
	/// local-address: ip-socket-address, // IP_PKTINFO / IP_RECVDSTADDR / IPV6_PKTINFO
	/// local-interface: u32, // IP_PKTINFO / IP_RECVIF
	/// ttl: u8, // IP_RECVTTL
	/// dscp: u6, // IP_RECVTOS
	/// ecn: u2, // IP_RECVTOS
}

record udp-send-options {
	remote-address: ip-socket-address,

	/// Possible future additions:
	/// local-address: ip-socket-address, // IP_PKTINFO / IP_SENDSRCADDR / IPV6_PKTINFO
}

enum tcp-shutdown-type {
	/// Similar to `SHUT_RD` in POSIX.
	receive,

	/// Similar to `SHUT_WR` in POSIX.
	send,

	/// Similar to `SHUT_RDWR` in POSIX.
	both,
}

record ip-resolve-addresses-options {
	address-family: option<ip-address-family>,
	include-unavailable: bool,
}

resource socket {
	kind: function() -> expected<socket-kind, socket-error>

	/// TO DISCUSS: Don't want this.
	as-udp-socket: function() -> handle udp-socket

	/// TO DISCUSS: Don't want this.
	as-tcp-socket: function() -> handle tcp-socket
}


/// TO DISCUSS: Want to move these function to their respective module.
resource network {

	/// TO DISCUSS: Want to return a more specific type of socket.
	/// 
	/// Create a new UDP socket.
	/// 
	/// Similar to `socket(AF_INET or AF_INET6, SOCK_DGRAM, 0 or IPPROTO_UDP)` in POSIX.
	/// 
	/// References:
	/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/socket.html
	/// - https://man7.org/linux/man-pages/man2/socket.2.html
	/// 
	create-udp-socket: function() -> expected<handle socket, socket-error>

	/// TO DISCUSS: Want to return a more specific type of socket.
	/// 
	/// Create a new TCP socket.
	/// 
	/// Similar to `socket(AF_INET or AF_INET6, SOCK_STREAM, 0 or IPPROTO_TCP)` in POSIX.
	/// 
	/// References:
	/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/socket.html
	/// - https://man7.org/linux/man-pages/man2/socket.2.html
	/// 
	create-tcp-socket: function(address-family: ip-address-family) -> expected<handle socket, socket-error>

	/// Resolve an internet host name to a list of IP addresses.
	/// 
	/// Parameters:
	/// - `name`: The name to look up. IP addresses are not allowed. Unicode domain names are automatically converted
	///     to ASCII using IDNA encoding.
	/// - `address-family`: If provided, limit the results to addresses of this specific address family.
	/// - `include-unavailable`: When set to true, this function will also return addresses of which the runtime
	///   thinks (or knows) can't be connected to at the moment. For example, this will return IPv6 addresses on
	///   systems without an active IPv6 interface. Notes:
	///     - Even when no public IPv6 interfaces are present or active, names like "localhost" can still resolve to an IPv6 address.
	///     - Whatever is "available" or "unavailable" is volatile and can change everytime a network cable is unplugged.
	/// 
	/// Results:
	/// - When successful, there is always at least one result.
	/// - The results are returned in the order the runtime thinks the application should try to connect to first.
	/// - Never returns IPv4-mapped IPv6 addresses.
	/// 
	/// Returns EAI_FAIL when `name` is:
	/// - empty
	/// - an IP address
	/// - a syntactically invalid domain name in another way
	/// 
	/// 
	/// Comparison with getaddrinfo:
	/// 
	/// `getaddrinfo` is very generic and multipurpose by design. This WASI module is *not*.
	/// This module focuses strictly on translating internet domain names to ip addresses.
	/// That eliminates many of the other "hats" getaddrinfo has, like:
	/// - Mapping service names to port numbers ("https" -> 443)
	/// - Mapping service names/ports to socket types ("https" -> SOCK_STREAM)
	/// - Network interface name translation
	/// - IP address deserialization
	/// - IP address string canonicalization
	/// - Constants lookup for INADDR_ANY, INADDR_LOOPBACK, IN6ADDR_ANY_INIT and IN6ADDR_LOOPBACK_INIT
	/// 
	/// Almost all of these functionalities can be shimmed in the libc implementation. The exception is network
	/// interface name translation. That requires a future `if_nametoindex`-like syscall.
	/// 
	/// This function has a different signature and semantics than `getaddrinfo`. The dissimilar name is chosen to reflect this.
	/// 
	/// References:
	/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/getaddrinfo.html
	/// - https://man7.org/linux/man-pages/man3/getaddrinfo.3.html
	/// 
	resolve-addresses: function(name: string, options: ip-resolve-addresses-options) -> expected<list<ip-address>, socket-error>
}

/// TO DISCUSS: Subtyping. `udp-socket` is a `socket`.
resource udp-socket {

	/// Bind the socket to a specific IP address and port.
	///
	/// If the IP address is zero (`0.0.0.0` in IPv4, `::` in IPv6), it is left to the implementation to decide which
	/// network interface(s) to bind to.
	/// If the TCP/UDP port is zero, the socket will be bound to a random free port.
	/// 
	/// When a socket is not explicitly bound, the first invocation to a send or receive operation will
	/// implicitly bind the socket.
	/// 
	/// Returns an error if the socket is already bound.
	/// 
	/// TODO: disallow wildcard binds as long as there isn't a way to pass the local address to send & receive?
	/// - https://blog.cloudflare.com/everything-you-ever-wanted-to-know-about-udp-sockets-but-were-afraid-to-ask-part-1/#sourcing-packets-from-a-wildcard-socket
	/// - https://blog.powerdns.com/2012/10/08/on-binding-datagram-udp-sockets-to-the-any-addresses/
	/// 
	/// References
	/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/bind.html
	/// - https://man7.org/linux/man-pages/man2/bind.2.html
	bind: function(local-address: ip-socket-address) -> expected<unit, socket-error>

	/// Get the current bound address.
	/// 
	/// Returns an error if the socket is not bound.
	/// 
	/// References
	/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/getsockname.html
	/// - https://man7.org/linux/man-pages/man2/getsockname.2.html
	local-address: function() -> expected<ip-socket-address, socket-error>

	/// receive a message.
	/// 
	/// Returns:
	/// - The sender address of the datagram
	/// - The number of bytes read.
	/// - When the received datagram is larger than the provided buffers,
	///     the excess data is lost and the `truncated` flag will be set.
	/// 
	/// References
	/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/recvfrom.html
	/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/recvmsg.html
	/// - https://man7.org/linux/man-pages/man2/recv.2.html
	receive: function(iovs: iovecs) -> expected<udp-receive-result, socket-error>

	/// receive a message just like `receive`, but don't remove the message from the queue.
	peek: function(iovs: iovecs) -> expected<udp-receive-result, socket-error>

	/// send a message to a specific destination address.
	/// 
	/// The remote address option is required. To send a message to the "connected" peer,
	/// call `remote-address` to get their address.
	/// 
	/// Returns the number of bytes sent.
	/// 
	/// TODO: Does the returned number of bytes sent ever differ from the supplied buffer size for UDP sockets?
	/// 
	/// References
	/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/sendto.html
	/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/sendmsg.html
	/// - https://man7.org/linux/man-pages/man2/send.2.html
	send: function(iovs: iovecs, options: udp-send-options) -> expected<usize, socket-error>

	/// Set the destination address.
	/// 
	/// When a destination address is set:
	/// - all receive operations will only return datagrams sent from the provided `remote-address`.
	/// - the `send` function can still be used to send to any other destination, however you can't receive their response.
	/// 
	/// Similar to `connect(sock, ...)` in POSIX.
	/// 
	/// Note that this function does not generate any network traffic and the peer is not aware of this "connection".
	/// 
	/// TODO: "connect" is a rather odd name for this function because it doesn't reflect what's actually happening.
	///     Feels like it was chosen just to shoehorn UDP into the existing Socket interface.
	///     Do we have to keep this name?
	/// 
	/// TODO: add unconnect ability.
	/// 
	/// References
	/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/connect.html
	/// - https://man7.org/linux/man-pages/man2/connect.2.html
	connect: function(remote-address: ip-socket-address) -> expected<unit, socket-error>

	/// Get the address set with `connect`.
	/// 
	/// References
	/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/getpeername.html
	/// - https://man7.org/linux/man-pages/man2/getpeername.2.html
	remote-address: function() -> expected<ip-socket-address, socket-error>
}


/// TO DISCUSS: Subtyping. `tcp-socket` is a `socket` && `tcp-socket` is a `io-stream`. 
resource tcp-socket {

	/// TO DISCUSS: Don't want this.
	as-input-byte-stream: function() -> handle input-byte-stream

	/// TO DISCUSS: Don't want this.
	as-output-byte-stream: function() -> handle output-byte-stream

	/// Bind the socket to a specific IP address and port.
	///
	/// If the IP address is zero (`0.0.0.0` in IPv4, `::` in IPv6), it is left to the implementation to decide which
	/// network interface(s) to bind to.
	/// If the TCP/UDP port is zero, the socket will be bound to a random free port.
	/// 
	/// When a socket is not explicitly bound, the first invocation to a listen or connect operation will
	/// implicitly bind the socket.
	/// 
	/// Returns an error if the socket is already bound.
	/// 
	/// References
	/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/bind.html
	/// - https://man7.org/linux/man-pages/man2/bind.2.html
	bind: function(local-address: ip-socket-address) -> expected<unit, socket-error>

	/// Get the current bound address.
	/// 
	/// Returns an error if the socket is not bound.
	/// 
	/// References
	/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/getsockname.html
	/// - https://man7.org/linux/man-pages/man2/getsockname.2.html
	local-address: function() -> expected<ip-socket-address, socket-error>

	///	Connect to a remote endpoint.
	/// 
	/// Transitions the socket into the Connection state.
	/// Fails when the socket is already in the Connection or Listener state.
	/// 
	///  References
	/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/connect.html
	/// - https://man7.org/linux/man-pages/man2/connect.2.html
	connect: function(remote-address: ip-socket-address) -> expected<unit, socket-error>

	/// Start listening for new connections.
	/// 
	/// Transitions the socket into the Listener state.
	/// Fails when the socket is already in the Connection or Listener state.
	/// 
	///  References
	/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/listen.html
	/// - https://man7.org/linux/man-pages/man2/listen.2.html
	listen: function(backlog-size-hint: option<usize>) -> expected<unit, socket-error>

	/// Fails when the socket is not in the Connection state.
	/// 
	/// Read data from the stream just like `InputByteStream::read`, but don't remove the data from the queue.
	peek: function(iovs: iovecs) -> expected<usize, socket-error>

	/// Fails when the socket is not in the Connection state.
	/// 
	/// References
	/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/getpeername.html
	/// - https://man7.org/linux/man-pages/man2/getpeername.2.html
	remote-address: function() -> expected<ip-socket-address, socket-error>
	
	/// Gracefully shut down the connection.
	/// 
	/// - receive: the socket is not expecting to receive any more data from the peer. All subsequent read/receive
	///   operations will return 0, indicating End Of Stream. If there is still data in the receive queue at time of
	///   calling `shutdown` or whenever new data arrives afterwards, then (TODO).
	/// - send: the socket is not expecting to send any more data to the peer. After all data in the send queue has
	///   been sent and acknowledged, a FIN will be sent. All subsequent write/send operations will return an
	///   EPIPE error.
	/// - both: receive & send
	/// 
	/// The shutdown function does not close the socket.
	/// 
	/// Fails when the socket is not in the Connection state.
	/// 
	/// TODO: Look into how different platforms behave after shutdown(Read) has been called and new data arrives. According to the internet (unverified):
	/// - BSD: silently discards the data
	/// - Linux: effectively ignores the shutdown call. New data can still be read. If not done will ultimately block the sender.
	/// - Windows: sends RST
	/// 
	/// TODO: Look into how different platforms behave when trying to shut down the same direction multiple times.
	/// 
	/// References
	/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/shutdown.html
	/// - https://man7.org/linux/man-pages/man2/shutdown.2.html
	shutdown: function(shutdown-type: tcp-shutdown-type) -> expected<unit, socket-error>

	/// TO DISCUSS: Want to return a more specific type of socket.
	/// 
	/// Unlike POSIX, this function does not returns the remote address.
	/// If you want to know this information, invoke `remote-address` on the newly created socket.
	/// 
	/// Fails when this socket is not in the Listening state.
	/// 
	/// Returns a new bound socket in the Connection state.
	/// 
	/// References:
	/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/accept.html
	/// - https://man7.org/linux/man-pages/man2/accept.2.html
	accept: function() -> expected<handle socket, socket-error>
}

