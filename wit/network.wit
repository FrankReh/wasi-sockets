
default interface network {
    /// An opaque resource that represents access to (a subset of) the network.
	/// This enables context-based security for networking.
	/// There is no need for this to map 1:1 to a physical network interface.
	/// 
	/// FYI, In the future this will be replaced by handle types.
    type network = u32

	/// Dispose of the specified `network`, after which it may no longer be used.
	/// 
	/// Note: this function is scheduled to be removed when Resources are natively supported in Wit.
	drop-network: func(this: network)


	/// Error codes.
	/// 
	/// In theory, every API can return any error code.
	/// In practice, API's typically only return the errors documented per API
	/// combined with a couple of errors that are always possible:
	/// - `unknown`
	/// - `access-denied`
	/// - `not-supported`
	/// - `resource-limit-reached`
	/// - `out-of-memory`
	/// 
	/// See each individual API for what the POSIX equivalents are. They sometimes differ per API.
	enum error {
		// ### GENERAL ERRORS ###

		/// Unknown error
		unknown,

		/// POSIX equivalent: EACCES, EPERM
		access-denied,

		/// POSIX equivalent: EOPNOTSUPP
		not-supported,

		/// POSIX equivalent: EMFILE, ENFILE, ENOMEM, ENOBUFS, EAI_MEMORY
		resource-limit-reached,

		/// POSIX equivalent: ENOMEM, ENOBUFS, EAI_MEMORY
		out-of-memory,

		timeout,
		concurrency-conflict,


		// ### IP ERRORS ###
		address-family-not-supported,
		address-family-mismatch,
		invalid-remote-address,
		ipv4-only-operation,
		ipv6-only-operation,



		// ### TCP & UDP SOCKET ERRORS ###
		already-attached,
		already-bound,
		already-connected,
		not-bound,
		not-connected,
		address-not-bindable,
		address-in-use,
		ephemeral-ports-exhausted,
		remote-unreachable,
		

		// ### TCP SOCKET ERRORS ###
		already-listening,
		not-listening,
		connection-refused,
		connection-reset,
		
		
		// ### UDP SOCKET ERRORS ###
		datagram-too-large,


		// ### NAME LOOKUP ERRORS ###
		invalid-name,
		name-unresolvable,
		temporary-resolver-failure,
		permanent-resolver-failure,
	}

	enum ip-address-family {
		/// Similar to `AF_INET` in POSIX.
		ipv4, 

		/// Similar to `AF_INET6` in POSIX.
		ipv6,
	}

	type ipv4-address = tuple<u8, u8, u8, u8>
	type ipv6-address = tuple<u16, u16, u16, u16, u16, u16, u16, u16>

	variant ip-address {
		ipv4(ipv4-address),
		ipv6(ipv6-address),
	}

	record ipv4-socket-address {
		port: u16, // sin_port
		address: ipv4-address, // sin_addr
	}

	record ipv6-socket-address {
		port: u16, // sin6_port
		flow-info: u32, // sin6_flowinfo
		address: ipv6-address, // sin6_addr
		scope-id: u32, // sin6_scope_id
	}

	variant ip-socket-address {
		ipv4(ipv4-socket-address),
		ipv6(ipv6-socket-address),
	}

}